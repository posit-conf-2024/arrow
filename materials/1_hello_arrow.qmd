---
footer: "[üîó pos.it/arrow-conf24](https://pos.it/arrow-conf24)"
logo: "images/logo.png"
execute:
  echo: true
format:
  revealjs: 
    theme: default
engine: knitr
editor: source
---

# Hello Arrow {#hello-arrow}


## Kick-off Q&A

<br>

- What brings you to this workshop?
- What challenges have you faced related to larger-than-memory data in R?
- What is one thing you want to learn or achieve from today's workshop?
- ...?


## Poll: Arrow

<br>

**Have you used or experimented with Arrow before today?**

Vote using emojis on the #workshop-arrow discord channel! <br> 

1Ô∏è‚É£ Not yet

2Ô∏è‚É£ Not yet, but I have read about it!

3Ô∏è‚É£ A little

4Ô∏è‚É£ A lot


## Hello Arrow<br>Demo

<br>

![](images/logo.png){.absolute top="0" left="250" width="600" height="800"}

## Some "Big" Data

![](images/nyc-taxi-homepage.png){.absolute left="200" width="600"}

::: {style="font-size: 60%; margin-top: 550px; margin-left: 200px;"}
<https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page>
:::

## NYC Taxi Data

-   *big* NYC Taxi data set (\~40GBs on disk)

```{r}
#| label: get-big-data
#| eval: false
open_dataset("s3://voltrondata-labs-datasets/nyc-taxi") |>
  filter(year %in% 2012:2021) |>
  write_dataset("data/nyc-taxi", partitioning = c("year", "month"))
```

-   *tiny* NYC Taxi data set (\<1GB on disk)

```{r}
#| label: get-small-data
#| eval: false
download.file(url = "https://github.com/posit-conf-2023/arrow/releases/download/v0.1.0/nyc-taxi-tiny.zip",
              destfile = "data/nyc-taxi-tiny.zip")

unzip(
  zipfile = "data/nyc-taxi-tiny.zip",
  exdir = "data/"
)
```

## Posit Workbench üõ†Ô∏è

-   Join Workbench via URL in the #workshop-arrow Discord channel
-   You can use your GitHub credentials to log in

![](images/wb-signin.png){.absolute left="200" width="300"}
![](images/use-gh-creds.png){.absolute left="500" width="300"}


## Larger-Than-Memory Data

<br>

`arrow::open_dataset()`

<br>

::: notes
Arrow Datasets allow you to query against data that has been split across multiple files. This division of data into multiple files may indicate partitioning, which can accelerate queries that only touch some partitions (files). Call open_dataset() to point to a directory of data files and return a Dataset, then use dplyr methods to query it.
:::

## NYC Taxi Dataset

```{r}
#| label: first-open_dataset
library(arrow)

nyc_taxi <- open_dataset("data/nyc-taxi")
```

## NYC Taxi Dataset

```{r}
#| label: first-taxi-data
nyc_taxi |> 
  nrow()
```

<br>

1.15 billion rows ü§Ø

## NYC Taxi Dataset: A question

<br>

What percentage of taxi rides each year had more than 1 passenger?

## NYC Taxi Dataset: A dplyr pipeline

```{r}
#| label: first-collect
library(dplyr)

nyc_taxi |>
  group_by(year) |>
  summarise(
    all_trips = n(),
    shared_trips = sum(passenger_count > 1, na.rm = TRUE)
  ) |>
  mutate(pct_shared = shared_trips / all_trips * 100) |>
  collect()
```

## NYC Taxi Dataset: A dplyr pipeline

```{r}
#| label: first-timing
#| eval: false
library(tictoc)

tic()
nyc_taxi |>
  group_by(year) |>
  summarise(
    all_trips = n(),
    shared_trips = sum(passenger_count > 1, na.rm = TRUE)
  ) |>
  mutate(pct_shared = shared_trips / all_trips * 100) |>
  collect()
toc()
```

> 6.077 sec elapsed

## Your Turn

1.  Calculate the longest trip distance for every month in 2019

2.  How long did this query take to run?

‚û°Ô∏è [Hello Arrow Exercises Page](1_hello_arrow-exercises.html)

## What is Apache Arrow?

::: columns
::: {.column width="50%"}
> A multi-language toolbox for accelerated data interchange and in-memory processing
:::

::: {.column width="50%"}
> Arrow is designed to both improve the performance of analytical algorithms and the efficiency of moving data from one system or programming language to another
:::
:::

::: {style="font-size: 70%;"}
<https://arrow.apache.org/overview/>
:::

## Apache Arrow Specification

In-memory columnar format: a standardized, language-agnostic specification for representing structured, table-like data sets in-memory.

<br>

![](images/arrow-rectangle.png){.absolute left="200"}

## A Multi-Language Toolbox

![](images/arrow-libraries-structure.png)

## Accelerated Data Interchange

![](images/data-interchange-with-arrow.png)

## Accelerated In-Memory Processing

Arrow's Columnar Format is Fast

![](images/columnar-fast.png){.absolute top="120" left="200" height="600"}

::: notes
The contiguous columnar layout enables vectorization using the latest SIMD (Single Instruction, Multiple Data) operations included in modern processors.
:::

## arrow üì¶

<br>

![](images/arrow-r-pkg.png){.absolute top="0" left="300" width="700" height="900"}

## arrow üì¶

![](images/arrow-read-write-updated.png)

## Today

-   Module 1: Larger-than-memory data manipulation with Arrow---Part I
-   Module 2: Data engineering with Arrow
-   Module 3: In-memory workflows in R with Arrow
-   Module 4: Larger-than-memory data manipulation with Arrow---Part II

