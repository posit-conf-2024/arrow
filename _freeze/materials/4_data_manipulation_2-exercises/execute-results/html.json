{
  "hash": "dbef2e26fdb648c2e30c7d263d2f273a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Manipulation Part 2 - Exercises\"\nexecute:\n  echo: true\n  messages: false\n  warning: false\neditor: source\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(arrow)\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnyc_taxi <- open_dataset(\"data/nyc-taxi/\")\n```\n:::\n\n\n::: {#exercise-udfs .callout-tip}\n# User-defined functions\n\n::: panel-tabset\n## Problem\n\n1.  Write a user-defined function which wraps the `stringr` function `str_replace_na()`, and use it to replace any `NA` values in the `vendor_name` column with the string \"No vendor\" instead. (Test it on the data from 2019 so you're not pulling everything into memory)\n\n## Solution 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preview the distinct vendor names before we start\nnyc_taxi |>\n  filter(year == 2019) |> # smaller subset of the data\n  distinct(vendor_name) |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n  vendor_name\n  <chr>      \n1 CMT        \n2 VTS        \n3 <NA>       \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nregister_scalar_function(\n  name = \"replace_vendor_na\",\n  function(context, string) {\n    stringr::str_replace_na(string, \"No vendor\")\n  },\n  in_type = schema(string = string()),\n  out_type = string(),\n  auto_convert = TRUE\n)\n\nvendor_names_fixed <- nyc_taxi |>\n  mutate(vendor_name = replace_vendor_na(vendor_name)) \n\n# Preview the distinct vendor names to check it's worked\nvendor_names_fixed |>\n  filter(year == 2019) |> # smaller subset of the data\n  distinct(vendor_name) |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 1\n  vendor_name\n  <chr>      \n1 CMT        \n2 VTS        \n3 No vendor  \n```\n\n\n:::\n:::\n\n:::\n:::\n\n::: {#exercise-joins .callout-tip}\n# Joins\n\n::: panel-tabset\n## Problem\n\n1.  How many taxi pickups were recorded in 2019 from the three major airports covered by the NYC Taxis data set (JFK, LaGuardia, Newark)? (Hint: you can use `stringr::str_detect()` to help you find pickup zones with the word \"Airport\" in them)\n\n## Solution 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\npickup_location <- read_csv_arrow(\"data/taxi_zone_lookup.csv\")\n\npickup_location <- pickup_location |>\n  select(\n    pickup_location_id = LocationID,\n    borough = Borough,\n    pickup_zone = Zone\n  ) \n\n\npickup_location_arrow <- arrow_table(\n  pickup_location, \n  schema = schema(\n    pickup_location_id = int64(),\n    borough = utf8(),\n    pickup_zone = utf8()\n  ))\n\nnyc_taxi |>\n  filter(year == 2019) |>\n  left_join(pickup_location_arrow) |>\n  filter(str_detect(pickup_zone, \"Airport\")) |>\n  count(pickup_zone) |>\n  collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  pickup_zone             n\n  <chr>               <int>\n1 JFK Airport       2729336\n2 LaGuardia Airport 2159224\n3 Newark Airport       8643\n```\n\n\n:::\n:::\n\n:::\n:::\n\n",
    "supporting": [
      "4_data_manipulation_2-exercises_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}